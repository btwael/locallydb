// Generated by CoffeeScript 1.10.0
(function() {
  var Collection, Database, ErrorManager, now;

  Collection = require('./collection');

  ErrorManager = require('./errormanager');

  now = require('./utils').now;

  Database = (function() {
    function Database() {
      this.meta = {
        _created: now(),
        _updated: now()
      };
      this.collections = [];
    }

    Database.prototype.collection = function(name) {
      if (this.hasCollection(name)) {
        return this.getCollection(name);
      } else {
        return this.createCollection(name, true);
      }
    };

    Database.prototype.createCollection = function(name, skipLook) {
      var collection;
      if (skipLook == null) {
        skipLook = false;
      }
      if (!skipLook) {
        if (this.hasCollection(name)) {
          return ErrorManager["throw"](101, [name]);
        }
      }
      collection = new Collection(name, this);
      this.$update();
      this.collections.push(collection);
      return collection;
    };

    Database.prototype.getCollection = function(name) {
      var collection, i, len, ref;
      ref = this.collections;
      for (i = 0, len = ref.length; i < len; i++) {
        collection = ref[i];
        if (collection.getName() === name) {
          return collection;
        }
      }
      return ErrorManager["throw"](104, [name]);
    };

    Database.prototype.hasCollection = function(name) {
      var collection, found, i, len, ref;
      found = false;
      ref = this.collections;
      for (i = 0, len = ref.length; i < len; i++) {
        collection = ref[i];
        if (collection.getName() === name) {
          found = true;
          break;
        }
      }
      return found;
    };

    Database.prototype.removeCollection = function(name) {
      var collection, i, index, len, ref;
      ref = this.collections;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        collection = ref[index];
        if (collection.getName() === name) {
          this.$update();
          delete this.collections[index];
          return true;
        }
      }
      return ErrorManager["throw"](102, [name]);
    };

    Database.prototype.getCollectionNames = function() {
      var collection, i, len, ref, results;
      ref = this.collections;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        collection = ref[i];
        results.push(collection.getName());
      }
      return results;
    };

    Database.prototype.$update = function(time) {
      if (time == null) {
        time = null;
      }
      if (time === null) {
        time = now();
      }
      return this.meta._updated = time;
    };

    return Database;

  })();

  module.exports = Database;

}).call(this);
